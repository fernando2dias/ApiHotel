// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231109004918_fixreview5")]
    partial class fixreview5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c74e2996-2485-4eb2-9d6c-03d7d8a0b397"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8680),
                            Email = "fer@admin.com.br",
                            Name = "Administrador",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8689)
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CPF")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Passport")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RG")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            BirthDate = new DateTime(1986, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CPF = "111.222.333-44",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8837),
                            Email = "fernando3dias@gmail.com",
                            LastName = "Dias Motta",
                            Name = "Fernando",
                            Password = "123mudar",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8838)
                        });
                });

            modelBuilder.Entity("Domain.Entities.DependentPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("DependentPerson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HotelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AvgTicket")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hotel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("746aff68-3e9f-4621-990d-8889275aba05"),
                            Address = "Rodovia Senador José Ermírio de Moraes, 1425",
                            AvgTicket = 150m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8879),
                            Name = "Facens Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8880),
                            ZipCode = "18085-784"
                        },
                        new
                        {
                            Id = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            Address = "Avenida das Estrelas, 123",
                            AvgTicket = 250m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8882),
                            Name = "Luxury Palace Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8882),
                            ZipCode = "12345-678"
                        },
                        new
                        {
                            Id = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Address = "Rua das Flores, 456",
                            AvgTicket = 120m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8883),
                            Name = "Cozy Inn",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8884),
                            ZipCode = "54321-987"
                        },
                        new
                        {
                            Id = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            Address = "Avenida Beira-Mar, 789",
                            AvgTicket = 180m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8885),
                            Name = "Harbor View Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8886),
                            ZipCode = "98765-432"
                        },
                        new
                        {
                            Id = new Guid("2fab9ede-2d00-4d96-a639-11bd168d6a38"),
                            Address = "Praia da Areia Dourada, S/N",
                            AvgTicket = 300m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8887),
                            Name = "Golden Sands Resort",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8887),
                            ZipCode = "34567-890"
                        },
                        new
                        {
                            Id = new Guid("9670ad43-f26d-4989-a634-78bf33ae9cf1"),
                            Address = "Margem do Rio, 987",
                            AvgTicket = 160m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8889),
                            Name = "Riverside Lodge",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8890),
                            ZipCode = "76543-210"
                        },
                        new
                        {
                            Id = new Guid("971dc5b3-b1ce-4ff1-b3a1-3a02155a7c82"),
                            Address = "Praça Principal, 654",
                            AvgTicket = 280m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8891),
                            Name = "The Grand Plaza Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8892),
                            ZipCode = "23456-789"
                        },
                        new
                        {
                            Id = new Guid("73413cb7-1e85-4cc5-93db-517aa5fd8b0d"),
                            Address = "Avenida do Pôr do Sol, 321",
                            AvgTicket = 140m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8893),
                            Name = "Sunset View Inn",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8893),
                            ZipCode = "87654-321"
                        },
                        new
                        {
                            Id = new Guid("54b54b3e-01ab-4f9a-9f97-78e90caa1843"),
                            Address = "Rua das Montanhas, 567",
                            AvgTicket = 200m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8895),
                            Name = "Majestic Heights Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8895),
                            ZipCode = "54321-234"
                        },
                        new
                        {
                            Id = new Guid("2a929d45-1a92-41d6-9f94-cbee7fa3aed6"),
                            Address = "Avenida Central, 876",
                            AvgTicket = 130m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8896),
                            Name = "Sorocaba Suites",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8897),
                            ZipCode = "12345-543"
                        },
                        new
                        {
                            Id = new Guid("2ec772b5-10ce-44e6-a39c-d10a6a4ea2d5"),
                            Address = "Trilha da Montanha, 765",
                            AvgTicket = 190m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8901),
                            Name = "Mountain View Lodge",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8901),
                            ZipCode = "65432-123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Checkin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Checkout")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReserveDateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReserveDateInit")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EvaluationStars")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Review", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dca8101-055d-44b9-a861-43878356dc49"),
                            Comment = "Bom serviço, mas pode melhorar",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8970),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 3,
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8971)
                        },
                        new
                        {
                            Id = new Guid("33ab9237-7e1d-4e5c-a714-00e8e32899b6"),
                            Comment = "Experiência positiva no hotel",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8972),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 4,
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8973)
                        },
                        new
                        {
                            Id = new Guid("8a8fe94a-207f-495d-884c-4058aeb0d887"),
                            Comment = "Não fiquei satisfeito com a estadia",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8974),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 2,
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8975)
                        },
                        new
                        {
                            Id = new Guid("c0cf12f2-6ce2-4f2a-a7b1-fe94812088d8"),
                            Comment = "Incrível! Superou minhas expectativas",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8978),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 5,
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8978)
                        },
                        new
                        {
                            Id = new Guid("d14d43da-4592-49ca-a944-575b2cb803f9"),
                            Comment = "Péssima experiência. Não recomendo",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8979),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 1,
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8980)
                        },
                        new
                        {
                            Id = new Guid("36d0d81c-4cbd-482c-bfd5-3261c1226d6a"),
                            Comment = "Fiquei satisfeito com a estadia",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8981),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 4,
                            HotelId = new Guid("746aff68-3e9f-4621-990d-8889275aba05"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8982)
                        },
                        new
                        {
                            Id = new Guid("0bd286be-152a-4834-8696-f59d68c62fa2"),
                            Comment = "Terrível! Evite este lugar a todo custo",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8983),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 0,
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8983)
                        },
                        new
                        {
                            Id = new Guid("6b6abfb3-292c-4711-8668-4cdff982e0ca"),
                            Comment = "Melhor hotel que já visitei",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8985),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 5,
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8985)
                        },
                        new
                        {
                            Id = new Guid("053d83d1-559c-4550-9668-851ea3eb26ac"),
                            Comment = "Nada excepcional, mas foi ok",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8986),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 3,
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8987)
                        },
                        new
                        {
                            Id = new Guid("ab6da024-33c8-4a64-99a7-142a953ef5a1"),
                            Comment = "Boa escolha para a estadia",
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8988),
                            CustomerId = new Guid("e6246583-2c53-4310-a72b-16f807674d18"),
                            EvaluationStars = 4,
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8989)
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberBeds")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeRoom")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddced037-d7c3-400c-88d7-2e774b41aac3"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8932),
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            Number = 98,
                            NumberBeds = 3,
                            PricePerNight = 180m,
                            Status = 1,
                            TypeRoom = 5,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8933)
                        },
                        new
                        {
                            Id = new Guid("be4fa41f-03b6-41e5-84d9-013b640de52b"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8935),
                            HotelId = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Number = 9,
                            NumberBeds = 4,
                            PricePerNight = 132m,
                            Status = 1,
                            TypeRoom = 10,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8936)
                        },
                        new
                        {
                            Id = new Guid("2eb4d441-6927-438d-bccd-cf5a08ed34cb"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8938),
                            HotelId = new Guid("ae6eae3f-870a-4de0-a14a-9ad5baaf1929"),
                            Number = 29,
                            NumberBeds = 4,
                            PricePerNight = 106m,
                            Status = 1,
                            TypeRoom = 9,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8938)
                        },
                        new
                        {
                            Id = new Guid("260f640b-03d3-488c-9ad2-e2ed5c169ceb"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8940),
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            Number = 45,
                            NumberBeds = 2,
                            PricePerNight = 80m,
                            Status = 1,
                            TypeRoom = 6,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8941)
                        },
                        new
                        {
                            Id = new Guid("13dde1cc-853e-4ec6-9d31-3643a53ff5c6"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8943),
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            Number = 3,
                            NumberBeds = 2,
                            PricePerNight = 155m,
                            Status = 1,
                            TypeRoom = 11,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8943)
                        },
                        new
                        {
                            Id = new Guid("4399ecc2-b751-42f1-8558-18be5cb6096b"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8947),
                            HotelId = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Number = 63,
                            NumberBeds = 3,
                            PricePerNight = 182m,
                            Status = 1,
                            TypeRoom = 1,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8947)
                        },
                        new
                        {
                            Id = new Guid("e69eee1c-4920-4fc1-a75a-3e0288add687"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8949),
                            HotelId = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Number = 29,
                            NumberBeds = 2,
                            PricePerNight = 93m,
                            Status = 1,
                            TypeRoom = 7,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8949)
                        },
                        new
                        {
                            Id = new Guid("70449765-5fb3-41a8-8a01-c2b89fc1eefa"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8951),
                            HotelId = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Number = 84,
                            NumberBeds = 3,
                            PricePerNight = 135m,
                            Status = 1,
                            TypeRoom = 11,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8952)
                        },
                        new
                        {
                            Id = new Guid("112b2a60-2444-48ef-9f9d-a6c7f8586007"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8954),
                            HotelId = new Guid("3cbbf850-706a-4c4d-874b-c6f9e8c85bf3"),
                            Number = 59,
                            NumberBeds = 1,
                            PricePerNight = 166m,
                            Status = 1,
                            TypeRoom = 5,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8954)
                        },
                        new
                        {
                            Id = new Guid("0ee99932-398b-48a4-9aa0-36125ae0e3db"),
                            CreateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8956),
                            HotelId = new Guid("5d82ff9c-349d-471a-beda-b5abfb7f06bf"),
                            Number = 74,
                            NumberBeds = 2,
                            PricePerNight = 95m,
                            Status = 1,
                            TypeRoom = 7,
                            UpdateAt = new DateTime(2023, 11, 8, 21, 49, 17, 767, DateTimeKind.Local).AddTicks(8957)
                        });
                });

            modelBuilder.Entity("Domain.Entities.DependentPersonEntity", b =>
                {
                    b.HasOne("Domain.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.ReservationEntity", b =>
                {
                    b.HasOne("Domain.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomEntity", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.RoomEntity", b =>
                {
                    b.HasOne("Domain.Entities.HotelEntity", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Entities.HotelEntity", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
