// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20231108231213_fixreview")]
    partial class fixreview
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ef52675-e2e7-40ff-b6dd-ef1a481ffbb5"),
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(4849),
                            Email = "fer@admin.com.br",
                            Name = "Administrador",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(4859)
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CPF")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Passport")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RG")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8461be0-3d56-4a00-8c39-3c9eb3baac38"),
                            BirthDate = new DateTime(1986, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CPF = "111.222.333-44",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5083),
                            Email = "fernando3dias@gmail.com",
                            LastName = "Dias Motta",
                            Name = "Fernando",
                            Password = "123mudar",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5083)
                        });
                });

            modelBuilder.Entity("Domain.Entities.DependentPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("DependentPerson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HotelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AvgTicket")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hotel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9205ef5-1311-4d09-bf13-f92288569ca2"),
                            Address = "Rodovia Senador José Ermírio de Moraes, 1425",
                            AvgTicket = 150m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5102),
                            Name = "Facens Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5103),
                            ZipCode = "18085-784"
                        },
                        new
                        {
                            Id = new Guid("a4ca3f74-7e0e-4945-8ba6-faee2059b0a6"),
                            Address = "Avenida das Estrelas, 123",
                            AvgTicket = 250m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5105),
                            Name = "Luxury Palace Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5105),
                            ZipCode = "12345-678"
                        },
                        new
                        {
                            Id = new Guid("5ceda157-fac3-4720-9c11-5f2535c122cb"),
                            Address = "Rua das Flores, 456",
                            AvgTicket = 120m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5107),
                            Name = "Cozy Inn",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5108),
                            ZipCode = "54321-987"
                        },
                        new
                        {
                            Id = new Guid("f34d322f-f5dc-41d9-ada9-c10ed23fd4d3"),
                            Address = "Avenida Beira-Mar, 789",
                            AvgTicket = 180m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5110),
                            Name = "Harbor View Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5110),
                            ZipCode = "98765-432"
                        },
                        new
                        {
                            Id = new Guid("5dd2e94e-1a17-4a7b-a21f-ce4deda1df65"),
                            Address = "Praia da Areia Dourada, S/N",
                            AvgTicket = 300m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5112),
                            Name = "Golden Sands Resort",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5113),
                            ZipCode = "34567-890"
                        },
                        new
                        {
                            Id = new Guid("9d46bbdf-3dab-401f-a12c-5ce334014f35"),
                            Address = "Margem do Rio, 987",
                            AvgTicket = 160m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5116),
                            Name = "Riverside Lodge",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5116),
                            ZipCode = "76543-210"
                        },
                        new
                        {
                            Id = new Guid("44196009-4f45-4a31-953c-f080ac7cb435"),
                            Address = "Praça Principal, 654",
                            AvgTicket = 280m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5119),
                            Name = "The Grand Plaza Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5120),
                            ZipCode = "23456-789"
                        },
                        new
                        {
                            Id = new Guid("d304a6ce-f2dc-4a71-81a6-6fc294ac2b63"),
                            Address = "Avenida do Pôr do Sol, 321",
                            AvgTicket = 140m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5122),
                            Name = "Sunset View Inn",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5123),
                            ZipCode = "87654-321"
                        },
                        new
                        {
                            Id = new Guid("ec1fb76d-2a23-4479-9ae7-d11ae8d49830"),
                            Address = "Rua das Montanhas, 567",
                            AvgTicket = 200m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5125),
                            Name = "Majestic Heights Hotel",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5126),
                            ZipCode = "54321-234"
                        },
                        new
                        {
                            Id = new Guid("a4bbcb28-1315-4624-b6d1-51163021da75"),
                            Address = "Avenida Central, 876",
                            AvgTicket = 130m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5128),
                            Name = "Sorocaba Suites",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5128),
                            ZipCode = "12345-543"
                        },
                        new
                        {
                            Id = new Guid("4e2d50ba-d1e7-4a0d-8956-ac45ec12cc61"),
                            Address = "Trilha da Montanha, 765",
                            AvgTicket = 190m,
                            City = "Sorocaba",
                            CreateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5135),
                            Name = "Mountain View Lodge",
                            State = "SP",
                            UpdateAt = new DateTime(2023, 11, 8, 20, 12, 13, 481, DateTimeKind.Local).AddTicks(5135),
                            ZipCode = "65432-123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Checkin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Checkout")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReserveDateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReserveDateInit")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EvaluationStars")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotelId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberBeds")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeRoom")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("024a0c0f-3f06-41f1-9cca-a29f16edd7d2"),
                            HotelId = new Guid("a4ca3f74-7e0e-4945-8ba6-faee2059b0a6"),
                            Number = 37,
                            NumberBeds = 1,
                            PricePerNight = 177m,
                            Status = 1,
                            TypeRoom = 4
                        },
                        new
                        {
                            Id = new Guid("7628fad8-1cdd-4e65-8167-006363730082"),
                            HotelId = new Guid("f34d322f-f5dc-41d9-ada9-c10ed23fd4d3"),
                            Number = 5,
                            NumberBeds = 1,
                            PricePerNight = 179m,
                            Status = 1,
                            TypeRoom = 3
                        },
                        new
                        {
                            Id = new Guid("f15916e1-7e43-4f59-a138-87b65cf6d897"),
                            HotelId = new Guid("5ceda157-fac3-4720-9c11-5f2535c122cb"),
                            Number = 89,
                            NumberBeds = 2,
                            PricePerNight = 137m,
                            Status = 1,
                            TypeRoom = 9
                        },
                        new
                        {
                            Id = new Guid("d862683e-db14-4b82-a0a6-91178b900710"),
                            HotelId = new Guid("e9205ef5-1311-4d09-bf13-f92288569ca2"),
                            Number = 4,
                            NumberBeds = 3,
                            PricePerNight = 194m,
                            Status = 1,
                            TypeRoom = 3
                        },
                        new
                        {
                            Id = new Guid("df0370fd-f690-4733-9cff-0f487eec821c"),
                            HotelId = new Guid("a4ca3f74-7e0e-4945-8ba6-faee2059b0a6"),
                            Number = 28,
                            NumberBeds = 2,
                            PricePerNight = 103m,
                            Status = 1,
                            TypeRoom = 6
                        },
                        new
                        {
                            Id = new Guid("d52239d9-fc0d-4c62-bde2-283977d1cec1"),
                            HotelId = new Guid("e9205ef5-1311-4d09-bf13-f92288569ca2"),
                            Number = 73,
                            NumberBeds = 3,
                            PricePerNight = 184m,
                            Status = 1,
                            TypeRoom = 3
                        },
                        new
                        {
                            Id = new Guid("7ced0558-1f3b-4376-94ad-72f4f5d910f5"),
                            HotelId = new Guid("5ceda157-fac3-4720-9c11-5f2535c122cb"),
                            Number = 64,
                            NumberBeds = 1,
                            PricePerNight = 172m,
                            Status = 1,
                            TypeRoom = 11
                        },
                        new
                        {
                            Id = new Guid("9289104f-83a6-4746-b299-f71424137359"),
                            HotelId = new Guid("5ceda157-fac3-4720-9c11-5f2535c122cb"),
                            Number = 18,
                            NumberBeds = 1,
                            PricePerNight = 129m,
                            Status = 1,
                            TypeRoom = 11
                        },
                        new
                        {
                            Id = new Guid("b092fde0-eb05-4fbd-bf61-cace5e902545"),
                            HotelId = new Guid("f34d322f-f5dc-41d9-ada9-c10ed23fd4d3"),
                            Number = 83,
                            NumberBeds = 4,
                            PricePerNight = 80m,
                            Status = 1,
                            TypeRoom = 2
                        },
                        new
                        {
                            Id = new Guid("c7da17ef-6fdb-43da-b92c-8825830a9561"),
                            HotelId = new Guid("e9205ef5-1311-4d09-bf13-f92288569ca2"),
                            Number = 66,
                            NumberBeds = 1,
                            PricePerNight = 163m,
                            Status = 1,
                            TypeRoom = 6
                        });
                });

            modelBuilder.Entity("Domain.Entities.DependentPersonEntity", b =>
                {
                    b.HasOne("Domain.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.ReservationEntity", b =>
                {
                    b.HasOne("Domain.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomEntity", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HotelEntity", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Entities.RoomEntity", b =>
                {
                    b.HasOne("Domain.Entities.HotelEntity", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Entities.HotelEntity", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
